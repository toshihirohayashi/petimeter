#! /usr/bin/env python
# Requires python 2.7 or later
import json
import argparse
import sys
from sys import stdout,stderr,version_info

n_decimals = 2

def print_descriptors(detailed, d, pre_string, post_string):
    l = ['mean','stdev']
    if detailed:
        l = ['mean','stdev','median','min','max']

    for k in l:
        stdout.write('{}{:7.{}f}{}'.format(pre_string, d[k], n_decimals, post_string))


def print_csv(detailed, d, elements, l):
    if detailed:
        print(",Completeness,,cDNA coverage,,,,,5' extent,,,,, 3' extent,,,,,Genes per contig")
        print(",cDNA, CDS,mean, sd, median, min, max,mean, sd, median, min, max,mean, sd, median, min, max,mean, sd, median, min, max")
    else:
        print(",Completeness,,cDNA coverage,,5' extent,, 3' extent,,Genes per contig")
        print(",cDNA, CDS, mean, sd, mean, sd, mean, sd, mean, sd")

    for k in l:
        stdout.write('{},{},{},'.format(k,d[k]['completeness']['cDNA'],d[k]['completeness']['CDS']))
        for e in elements:
            print_descriptors(detailed, d[k][e], '', ',')
            
        print("\n")                       # Get a line break between datasets
    

def print_text(detailed, d, elements, name_list):
    longest_name = max(list(map(len, list(d.keys()))))
    prefix = ' ' * (longest_name + 1)
    if detailed: 
        print(prefix + "|Completeness|       cDNA coverage       |         5' extent        |         3' extent        |     Genes per contig")
        print(prefix + "| cDNA   CDS |  mean   sd med.  min  max | mean   sd med.  min  max | mean   sd med.  min  max | mean   sd med.  min  max")
    else:
        print(prefix + "|Completeness|  cDNA coverage |     5' extent  |    3' extent   |   Genes/contig")
        print(prefix + "| cDNA   CDS |    mean     sd |    mean     sd |   mean     sd  |    mean    sd")

    for k in name_list:
        stdout.write('{:<{}} |{:>5} {:>5} '.format(k, longest_name, d[k]['completeness']['cDNA'],d[k]['completeness']['CDS']))
        for e in elements:
            stdout.write('|')
            print_descriptors(detailed, d[k][e], ' ', '')
            
        print("\n")                       # Get a line break between datasets
    



def print_html(detailed, d, elements, name_list):
    if detailed:
        print('<html><head><style type="text/css">table {border: solid black 1px; border-collapse: collapse;} th, td {border: solid black 1px;} td {text-align: right;}</style></head><body>')
        print('<table><tr><th></th><th colspan=2>Completeness</th><th colspan=5>cDNA coverage</th><th colspan=5>5\' extent</th><th colspan=5>3\' extent</th><th colspan=5>Genes per contig</th></tr>')
        print("<tr><th/><th>cDNA</th><th>CDS</th><th>mean</th><th>sd</th><th>median</th><th>min</th><th>max</th><th>mean</th><th>sd</th><th>median</th><th>min</th><th>max</th><th>mean</th><th>sd</th><th>median</th><th>min</th><th>max</th><th>mean</th><th>sd</th><th>median</th><th>min</th><th>max</th></tr>")
    else:
        print('<html><head><style type="text/css">table {border: solid black 1px; border-collapse: collapse;} th, td {border: solid black 1px;} td {text-align: right;}</style></head><body>')
        print('<table><tr><th></th><th colspan=2>Completeness</th><th colspan=2>cDNA coverage</th><th colspan=2>5\' extent</th><th colspan=2>3\' extent</th><th colspan=2>Genes per contig</th></tr>')
        print("<tr><th/><th>cDNA</th><th>CDS</th><th>mean</th><th>sd</th><th>mean</th><th>sd</th><th>mean</th><th>sd</th><th>mean</th><th>sd</th></tr>")


    for k in name_list:
        stdout.write('<tr><td>{}</td><td>{}</td><td>{}</td>'.format(k,d[k]['completeness']['cDNA'],d[k]['completeness']['CDS']))
        for e in elements:
            print_descriptors(detailed, d[k][e], '<td>', '</td>')

        print('</tr>')
    print("</table></body></html>")


def safe_latex_string(s):
    return s.replace('_', '\_')

def print_latex(detailed, d, elements, name_list):
    n_cols = len(elements)*5 + 2
    alignment = 'r' * 5
    header = '|rr' + ('|' + alignment) * len(elements)
    print('\\documentclass{article}\\usepackage[a4paper,landscape,margin=2cm]{geometry}\\begin{document}{\\footnotesize\\begin{tabular}{l' + header + '} ')

    if detailed:
        print('&\\multicolumn{2}{|c|}{Completeness}&\\multicolumn{5}{|c|}{cDNA coverage}&\\multicolumn{5}{|c|}{5\' extent}&\\multicolumn{5}{|c|}{3\' extent}&\\multicolumn{5}{|c|}{Genes per contig}\\\\')
        print("&cDNA&CDS&mean&sd&median&min&max&mean&sd&median&min&max&mean&sd&median&min&max&mean&sd&median&min&max\\\\\\hline")
    else:
        print('&\\multicolumn{2}{|c|}{Completeness}&\\multicolumn{2}{|c|}{cDNA coverage}&\\multicolumn{2}{|c|}{5\' extent}&\\multicolumn{2}{|c|}{3\' extent}&\\multicolumn{2}{|c|}{Genes per contig}\\\\')
        print("&cDNA&CDS&mean&sd&mean&sd&mean&sd&mean&sd\\\\\\hline")

    for k in name_list:
        stdout.write('{}&{}&{}'.format(safe_latex_string(k),d[k]['completeness']['cDNA'],d[k]['completeness']['CDS']))
        for e in elements:
            print_descriptors(detailed, d[k][e], '&', '')

        print('\\\\')
    print('\\end{tabular}}\\end{document}')


###########################################################################################

if __name__ == "__main__":
    # Requires python 2.7 or later (due to the dictionary comprehensions?)
    if (sys.version_info[0] == 1) or (sys.version_info[0] == 2 and sys.version_info[1] < 7):
        print("This script requires Python version 2.7 or later")
        exit(1)

    parser = argparse.ArgumentParser(description='Take one or several petimeter JSON output files and create a table summarusing results.')
    parser.add_argument('-f', '--format', default='text', help='Choose output format: text (plan text, default), csv, html, latex, or markdown')
    parser.add_argument('-d', '--decimals', default=2, help='Precision: choose the number of decimals.', type=int)
    parser.add_argument('-l', '--long', action='store_true', help='More details in output table')
    parser.add_argument('jsonfiles', nargs='+')

    args = parser.parse_args()

    data={}                     # We will collect all data here for plotting
    name_list=[]                # To preserve the order of the input
    n_correct_files = 0
    for f in args.jsonfiles:
        try:
            j_file = open(f)
            rawdata = json.load(j_file)
            n_correct_files += 1
        except Exception as e:
            stderr.write("Warning: Could not read JSON data from file '" + f + "'. Ignoring and continuing.\n")
            continue

        metadata = rawdata.get('input')
        if metadata:
            dataset_name = metadata['name']
            name_list.append(dataset_name)

        else:
            format_version = rawdata.get('assessment_format')
            details_format = rawdata.get('details_format')
            if details_format:
                stderr.write("Warning: file '" + f + "' is a details-file from petimeter. Use the assessment-file instead! Ignoring and continuing.\n") 
            elif format_version > 1:
                stderr.write("Warning: file '" + f + "' seems to be an assessment-file of a later format. This tool cannot read it.\n")     
            else:
                stderr.write("Warning: file '" + f + "' is probably not output from petimeter: the dataset name (may be filename) is missing. Ignoring and continuing.\n")
            continue

        data[dataset_name] = {}
        for k in list(rawdata.keys()):
            data[dataset_name][k] = rawdata[k]

    if n_correct_files < 1:
        stderr.write("Error: empty input -- no correct files in input.\n")
        exit(2)

    if args.decimals:
        n_decimals = args.decimals

    # Completeness should always be printed, but I may decide to choose from the following
    elements = ['cDNA_coverage', 'five_prime_extent', 'three_prime_extent', 'genes_per_contig']
    if args.format == 'csv':
        print_csv(args.long, data, elements, name_list)
    elif args.format == 'txt' or args.format == 'text':
        print_text(args.long, data, elements, name_list)
    elif args.format == 'html':
        print_html(args.long, data, elements, name_list)
    elif args.format == 'latex' or args.format == 'tex':
        print_latex(args.long, data, elements, name_list)
    elif args.format == 'md' or args.format == 'markdown':
        print("Markdown output not implemented yet.")
    else:
        stderr.write("Error: format '" + args.format + "' is not implemented by petimeter_table\n")
        exit(1)

