#! /usr/bin/env python
from __future__ import print_function
import json
import argparse
import sys 
import numpy

cover_threshold=0.95     # How well should the cDNA have been matched to the assembly? This matches 'min_coverage_for_complete_gene' in petimeter.

def intersection(d, name1, name2):
    '''
    Compute how many genes assemblies 1 and 2 share.
    '''

    # Extract the dictionaries containing pairs of transcript name and transcript alignment extent ('coverage')
    t1 = d[name1]['cDNA_coverage']
    t2 = d[name2]['cDNA_coverage']

    # Filter away tiny hits, using a dict comprehension:
    x1 = {acc: cov for (acc, cov) in t1.items() if cov >= cover_threshold}
    x2 = {acc: cov for (acc, cov) in t2.items() if cov >= cover_threshold}

    # Extract transcipt names as a set
    s1 = set(x1.keys())
    return len(s1.intersection(list(x2.keys())))


def gene_correlation(d, name1, name2):
    '''
    Compute how much the gene (transcript) alignments correlate. If a gene is missing, it considered to zero alignment extent.
    '''
    # Extract the dictionaries containing pairs of transcript name and transcript alignment extent ('coverage')
    t1 = d[name1]['cDNA_coverage']
    t2 = d[name2]['cDNA_coverage']

    # Get the union of transcript accessions
    keys = list(t1.keys() | t2.keys())
    return numpy.corrcoef(
        [t1.get(x, 0) for x in keys],
        [t2.get(x, 0) for x in keys])[0, 1]
    

def restricted_float(x):
    x = float(x)
    if x <= 0.0 or x > 1.0:
        raise argparse.ArgumentTypeError("%r not in range (0.0, 1.0]"%(x,))
    return x


def gene_unique(d, name1, name2):
    '''
    Count number of genes found in assembly name1, which are not found in name2.
    '''
    # Extract the dictionaries containing pairs of transcript name and transcript alignment extent ('coverage')
    t1 = d[name1]['cDNA_coverage']
    t2 = d[name2]['cDNA_coverage']

    # Filter away tiny hits, using a dict comprehension:
    x1 = {acc: cov for (acc, cov) in t1.items() if cov >= cover_threshold}
    x2 = {acc: cov for (acc, cov) in t2.items() if cov >= cover_threshold}

    n = 0
    for key in list(x1.keys()):
        if not x2.get(key):
            n += 1

    return n

################################################################################################################    

if __name__ == "__main__":

    # Requires python 2.7 or later (due to the dictionary comprehensions?)
    if (sys.version_info[0] == 1) or (sys.version_info[0] == 2 and sys.version_info[1] < 7):
        print("This script requires Python version 2.7 or later")
        sys.exit(1)

    parser = argparse.ArgumentParser(description='Take two or several JSON files from petimeter and compute agreement on gene contents.')
    parser.add_argument('-c', '--correlation', action="store_true", help='Output the correlation coefficient for the transcript alignment extent instead of gene count.')
    parser.add_argument('-u', '--unique', action="store_true", help='Number of genes found in one (row), but not the other (column).')
    parser.add_argument('-t', '--threshold', type=restricted_float, dest='cover_threshold', action='store',  help='Minimum alignment fraction of cDNA on contig. Default is 0.95. Set to 0 to get _every_ trace of a gene matched upp. This option does not affect -c', default=cover_threshold)
    parser.add_argument('jsonfile')
    parser.add_argument('jsonfiles', nargs='+')

    args = parser.parse_args()
    cover_threshold = float(args.cover_threshold)

    data={}                     # We will collect all data here for plotting
    name_list=[]                # To preserve the order of the input
    for f in [args.jsonfile] + args.jsonfiles:
        try:
            j_file = open(f)
            rawdata = json.load(j_file)
        except Exception as e:
            sys.stderr.write("Warning: Could not read JSON data from file '" + f + "'. Ignoring and continuing.\n")
            continue

        dataset_name = rawdata.get('name')
        name_list.append(dataset_name)
        if dataset_name:
            del rawdata['name'] # 'name' is meta data, the rest /should/ be data for plotting
        else:
            sys.stderr.write("Warning: file '" + f + "' is probably not output from petimeter: the dataset name (may be filename) is missing. Ignoring and continuing.\n")
            continue

        if data.get(dataset_name):
            sys.stderr.write("Error: There are two assemblies named '" + dataset_name + "' in the input. Aborting.\n")
            exit(3)

        data[dataset_name] = {}
        for k in list(rawdata.keys()):
            data[dataset_name][k] = rawdata[k]

    if args.unique:
        print("Unique genes. In row i, col j: number of genes in assembly i not found in assembly j.")
    elif args.correlation:
        print("Correlation of cDNA mapping extents.")
    else:
        print("Number of shared genes.")
        
    if not args.correlation:
        print("Requiring ", str(100*cover_threshold), "% of cDNA mapped:")


    indentation = max(list(map(len, name_list)))
    print(' '*indentation, end=' ')
    for name in name_list:
        if len(name)<9:
            print("{:>9} ".format(name), end=' ')
        else:
            print("{:}*{:} ".format(name[0:4],name[len(name)-4:len(name)]), end=' ')
    print()

    # This is twice as slow as necessary. My apologies.
    for i in range(len(name_list)):
        print("{:{}}".format(name_list[i], indentation), end=' ')
        for j in range(len(name_list)):
            if i == j:
                print(' ' * 10, end=' ')
            elif args.correlation:
                x = gene_correlation(data, name_list[i], name_list[j])
                print(" {:8.3} ".format(x), end=' ')
            elif args.unique:
                x = gene_unique(data, name_list[i], name_list[j])
                print(" {:8} ".format(x), end=' ')
            else: 
                x = intersection(data, name_list[i], name_list[j])
                print(" {:8} ".format(x), end=' ')
        print()
        

